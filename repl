#!/usr/bin/lua
local env = require "scheme.env"
local readline, rl = pcall(require, "readline")

env = env.new_environment()
env:eval_file("core.scm")

-- Quick and dirty way to find out if the chunk has balanced parentheses
local function is_balanced(str)
    local open = 0
    local close = 0

    local instr = false

    for i = 1, #str do
        if str:sub(i, i) == "\"" and str:sub(i - 1, i - 1) ~= "\\" then
            instr = not instr
        end

        if not instr then
            if str:sub(i, i) == "(" then
                open = open + 1
            elseif str:sub(i, i) == ")" then
                close = close + 1
            end
        end
    end

    return open == close
end

local evalbuf = ""
while true do
	local prompt

    if #evalbuf == 0 then
        prompt = ("(input):%d > "):format(env.parser.line)
    else
        prompt = ("        %d.. "):format(env.parser.line)
    end

	local line

	if readline then
		line = rl.readline(prompt)
	else
		io.write(prompt)
		line = io.read("*l")
	end

    if not line then
        break
    end

	if readline then
		rl.add_history(line)
	end

    evalbuf = evalbuf .. line

    if is_balanced(evalbuf) then
        local res = env:eval(evalbuf .. "\n")

        if res then
			env:define("_", res)

            print((">> %s\n  %s"):format(tostring(res), res.type))
        end

        evalbuf = ""
    end
end

print("^D - bye!")

